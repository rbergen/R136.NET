@inject ILanguageProvider LanguageProvider

@if (Visible)
{
<div class="modal fade show" style="display:block;">
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" style="width: 60%; max-width: 60%;">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title">@LanguageProvider.GetConfigurationValue(Constants.GameStatusText)</h4>
			</div>
			<div class="modal-body">
				<ul class="nav nav-tabs">
					<li class="nav-item">
						<a class="nav-link @(_selectedTab == Tab.Copy ? "active" : string.Empty)" @onclick="@CopyTabClicked">@LanguageProvider.GetConfigurationValue(Constants.CopyText)</a>
					</li>
					<li class="nav-item">
						<a class="nav-link @(_selectedTab == Tab.Paste ? "active" : string.Empty)" @onclick="@PasteTabClicked">@LanguageProvider.GetConfigurationValue(Constants.PasteText)</a>
					</li>
				</ul>
				@if (_selectedTab == Tab.Paste)
				{
					<form @onsubmit="@SubmitInput">
						<textarea class="form-control" id="status-text" style="height: 200px" @bind="@_enteredText"></textarea><br />
						<input type="submit" class="btn btn-primary" value="@LanguageProvider.GetConfigurationValue(Constants.OKText)" />
						<input type="button" class="btn" value="@LanguageProvider.GetConfigurationValue(Constants.CancelText)" @onclick="CancelClicked" />
					</form>
				}
				else
				{
					<p style="word-break: break-all;">
						@(StatusText)
					</p>
					<input type="button" class="btn btn-primary" value="@LanguageProvider.GetConfigurationValue(Constants.CloseText)" @onclick="CancelClicked" />
				}
			</div>
		</div>
	</div>
</div>
<div class="modal-backdrop fade show"></div>
}

@code {
	[Parameter]
	public string StatusText { get; set; }

	[Parameter]
	public EventCallback<string> TextSubmitted { get; set; }

	[Parameter]
	public bool Visible
	{
		get => _visible;
		set
		{
			if (_visible == value)
				return;

			_visible = value;

			if (VisibleChanged.HasDelegate)
				VisibleChanged.InvokeAsync(_visible);
		}
	}

	[Parameter]
	public EventCallback<bool> VisibleChanged { get; set; }

	private string _enteredText;
	private Tab _selectedTab = Tab.Copy;
	private bool _visible = false;

	private void CopyTabClicked(MouseEventArgs e)
	{
		_selectedTab = Tab.Copy;
		Visible = true;
	}

	private void PasteTabClicked(MouseEventArgs e)
	{
		_selectedTab = Tab.Paste;
		Visible = true;
	}

	private async Task SubmitInput(EventArgs e)
	{
		Visible = false;
		if (TextSubmitted.HasDelegate)
			await TextSubmitted.InvokeAsync(_enteredText);
	}

	private void CancelClicked(MouseEventArgs e)
		=> Visible = false;

	private enum Tab
	{
		Copy,
		Paste
	}
}
