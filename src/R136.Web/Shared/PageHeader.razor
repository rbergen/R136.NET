@inject IConfiguration Configuration
@inject ILanguageProvider LanguageProvider
 
<div class="row sticky-top bg-dark border-bottom border-danger align-items-center">
	<div class="col-2 text-left">
		<img class="rounded-3 my-2" style="height: 50px;" src="r136.png" alt="R136" />&nbsp;
	</div>
	<div class="col text-danger text-center">
		<h1><strong>@((MarkupString)LanguageProvider.GetConfigurationValue(Constants.HeaderText))</strong></h1>
	</div>
	<div class="col-2 text-end">
		<a class="text-decoration-none link-light" role="button" @onclick="DutchClicked">
			@if (LanguageProvider.Language == Constants.Dutch)
			{
				<strong>nl</strong>
			}
			else
			{
				<span>nl</span>
			}
		</a>
		<span class="text-white">&vert;</span>
		<a class="text-decoration-none link-light" role="button" @onclick="EnglishClicked">
			@if (LanguageProvider.Language == Constants.English)
			{
				<strong>en</strong>
			}
			else
			{
				<span>en</span>
			}
		</a>
		@if (ShowStatusIcon)
		{
			<i class="far fa-save ms-3 floppy-icon" role="button" @onclick="FloppyClicked" title="@LanguageProvider.GetConfigurationValue(Constants.GameStatusHeaderText)"></i>
		}
		else
		{
			<i class="far fa-save text-dark ms-3"></i>
		}
	</div>
</div>

@code  
{
	[Parameter]
	public bool ShowStatusIcon { get; set; }

	[Parameter]
	public EventCallback LanguageChanged { get; set; }

	[Parameter]
	public EventCallback StatusIconClicked { get; set; }

	private async Task FloppyClicked(MouseEventArgs e)
		=> await StatusIconClicked.InvokeAsync();

	private async Task DutchClicked(MouseEventArgs e)
		=> await SetLanguage(Constants.Dutch);

	private async Task EnglishClicked(MouseEventArgs e)
		=> await SetLanguage(Constants.English);

	private async Task SetLanguage(string language)
	{
		if (LanguageProvider.Language == language)
			return;

		LanguageProvider.Language = language;
		await LanguageChanged.InvokeAsync();
	}
}